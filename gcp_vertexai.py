# -*- coding: utf-8 -*-
"""GCP_VertexAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/173XwAKUPQrmGiT-vU5Z8HzCq9h-rVszH
"""

!pip install --upgrade --user google-cloud-aiplatform

!pip install ragstack-ai

from google.colab import userdata
PROJECT_ID=userdata.get('PROJECT_ID')

from google.colab import userdata
LOCATION=userdata.get('LOCATION')

import os

os.environ["GCP_PROJECT_ID"]=PROJECT_ID

os.environ["LOCATION"]=LOCATION

!gcloud config set project {os.getenv("GCP_PROJECT_ID")}

import sys

if "google.colab" in sys.modules:
  from google.colab import auth as google_auth
  google_auth.authenticate_user()

!gcloud auth list

import vertexai

vertexai.init(project=PROJECT_ID, location=LOCATION)

from vertexai.preview.generative_models import GenerativeModel

model = GenerativeModel("gemini-1.0-pro")

response = model.generate_content("What is =Artificial Intelligence?")

response

for r in response:
  print(r.text,end="")

"""**RAG SYSTEM**

Using DataStax vector Database cloud service
"""

# Initialize DB Endpoint and Token
ASTRA_DB_API_ENDPOINT= "https://ENDPOINT"
ASTRA_DB_APPLICATION_TOKEN="TOKEN"

os.environ["ASTRA_DB_ENDPOINT"]=ASTRA_DB_API_ENDPOINT

os.environ["ASTRA_DB_TOKEN"]=ASTRA_DB_APPLICATION_TOKEN

from vertexai.preview.generative_models import (
    GenerationConfig,
    GenerativeModel,
    HarmCategory,
    HarmBlockThreshold,
    Image,
    Part
)

prompt = """Create a list of 10 items. Item in the list should be  in the tech industry trend.

Each trend should be less than 5 words."""

response = model.generate_content(prompt,stream=True)

for response in response:
  print(response.text, end = "")

# Generation config for precies output
generation_config = GenerationConfig(
    temperature=0.9,
    top_p=1.0,
    top_k=32,
    candidate_count=1,
    max_output_tokens=8192
)

response=model.generate_content(prompt,generation_config=generation_config, stream=True)

for response in response:
  print(response.text, end="")

import requests

source_img_data =requests.get("https://drive.google.com/uc?export=view&id=15ddcn-AIxpvRdWcFGvIr77XLWdo4Maof").content

with open('coffee_maker_part.png', 'wb') as handler:
  handler.write(source_img_data)

from langchain_google_vertexai import ChatVertexAI

from langchain.schema.messages import HumanMessage
from PIL import Image, ImageFile
import os, sys

chat = ChatVertexAI(model_name="gemini-1.0-pro-vision")

image_message = {
    "type": "image_url",
    "image_url": {"url": "coffee_maker_part.png"},
}
text_message = {
    "type": "text",
    "text": "What is this image? Share a link to purchase a replacement",
}

message = HumanMessage(content=[text_message, image_message])

message

print(chat([message]).content)

"""RAG: Pass the image and based on that i can take a recommendation from my model."""

import pandas as pd

d = {'name': ["Saucer", "Saucer Ceramic", "Milk Jug Assembly", "Handle Steam Wand Kit (New Version From 0735 PDC)", "Spout Juice Small (From 0637 to 1041 PDC)", "Cleaning Steam Wand", "Jug Frothing", "Spoon Tamping 50mm", "Collar Grouphead 50mm", "Filter 2 Cup Dual Wall 50mm", "Filter 1 Cup 50mm", "Water Tank Assembly", "Portafilter Assembly 50mm", "Milk Jug Assembly", "Filter 2 Cup 50mm" ],
     'url': ["https://www.breville.com/us/en/parts-accessories/parts/sp0014946.html?sku=SP0014946", "https://www.breville.com/us/en/parts-accessories/parts/sp0014914.html?sku=SP0014914", "https://www.breville.com/us/en/parts-accessories/parts/sp0011391.html?sku=SP0011391", "https://www.breville.com/us/en/parts-accessories/parts/sp0010719.html?sku=SP0010719", "https://www.breville.com/us/en/parts-accessories/parts/sp0010718.html?sku=SP0010718", "https://www.breville.com/us/en/parts-accessories/parts/sp0003247.html?sku=SP0003247", "https://www.breville.com/us/en/parts-accessories/parts/sp0003246.html?sku=SP0003246", "https://www.breville.com/us/en/parts-accessories/parts/sp0003243.html?sku=SP0003243", "https://www.breville.com/us/en/parts-accessories/parts/sp0003232.html?sku=SP0003232", "https://www.breville.com/us/en/parts-accessories/parts/sp0003231.html?sku=SP0003231", "https://www.breville.com/us/en/parts-accessories/parts/sp0003230.html?sku=SP0003230", "https://www.breville.com/us/en/parts-accessories/parts/sp0003225.html?sku=SP0003225", "https://www.breville.com/us/en/parts-accessories/parts/sp0003216.html?sku=SP0003216", "https://www.breville.com/us/en/parts-accessories/parts/sp0001875.html?sku=SP0001875", "https://www.breville.com/us/en/parts-accessories/parts/sp0000166.html?sku=SP0000166"],
     'price': ["10.95", "4.99", "14.95", "8.95", "10.95", "6.95", "24.95", "8.95", "6.95", "12.95", "12.95", "14.95", "10.95", "16.95", "11.95"],
     'image': ["https://www.breville.com/content/dam/breville/us/catalog/products/images/sp0/sp0014946/tile.jpg", "https://www.breville.com/content/dam/breville/us/catalog/products/images/sp0/sp0014914/tile.jpg", "https://www.breville.com/content/dam/breville/us/catalog/products/images/sp0/sp0011391/tile.jpg", "https://www.breville.com/content/dam/breville/ca/catalog/products/images/sp0/sp0010719/tile.jpg", "https://www.breville.com/content/dam/breville/ca/catalog/products/images/sp0/sp0010718/tile.jpg", "https://www.breville.com/content/dam/breville/ca/catalog/products/images/sp0/sp0003247/tile.jpg", "https://assets.breville.com/cdn-cgi/image/width=400,format=auto/Spare+Parts+/Espresso+Machines/BES250/SP0003246/SP0003246_IMAGE1_400X400.jpg", "https://assets.breville.com/cdn-cgi/image/width=400,format=auto/Spare+Parts+/Espresso+Machines/ESP8/SP0003243/SP0003243_IMAGE1_400X400.jpg", "https://assets.breville.com/cdn-cgi/image/width=400,format=auto/Spare+Parts+/Espresso+Machines/ESP8/SP0003232/SP0003232_IMAGE1_400x400.jpg", "https://www.breville.com/content/dam/breville/au/catalog/products/images/sp0/sp0003231/tile.jpg", "https://www.breville.com/content/dam/breville/au/catalog/products/images/sp0/sp0003230/tile.jpg", "https://www.breville.com/content/dam/breville/ca/catalog/products/images/sp0/sp0003225/tile.jpg", "https://www.breville.com/content/dam/breville/ca/catalog/products/images/sp0/sp0003216/tile.jpg", "https://www.breville.com/content/dam/breville/au/catalog/products/images/sp0/sp0001875/tile.jpg", "https://www.breville.com/content/dam/breville/us/catalog/products/images/sp0/sp0000166/tile.jpg"]}
df = pd.DataFrame(data=d)
df

df.head()

df["url"]

df["image"]

import vertexai, json, requests
from vertexai.preview.vision_models import MultiModalEmbeddingModel, Image
from astrapy.db import AstraDB, AstraDBCollection
from google.colab import files

embed_model=MultiModalEmbeddingModel.from_pretrained("multimodalembedding@001")

astra_db = AstraDB(token=os.getenv("ASTRA_DB_TOKEN"), api_endpoint=os.getenv("ASTRA_DB_ENDPOINT"))

collection =astra_db.create_collection(collection_name="coffee_shop_ecommerce", dimension=1408)

for i in range(len(df)):
  name = df.loc[i, "name"]
  image = df.loc[i, "image"]
  price = df.loc[i, "price"]
  url = df.loc[i, "url"]

  # Download this product's image and save it to the Colab filesystem.
  # In a production system this binary data would be stored in Google Cloud Storage
  img_data = requests.get(image).content
  with open(f'{name}.png', 'wb') as handler:
    handler.write(img_data)

   # load the image from filesystem and compute the embedding value
  img = Image.load_from_file(f'{name}.png')
  embeddings = embed_model.get_embeddings(image=img, contextual_text=name)

  try:
    # add to the AstraDB Vector Database
    collection.insert_one({
        "_id": i,
        "name": name,
        "image": image,
        "url": url,
        "price": price,
        "$vector": embeddings.image_embedding,
      })
  except Exception as error:
    # if you've already added this record, skip the error message
    error_info = json.loads(str(error))
    if error_info[0]['errorCode'] == "DOCUMENT_ALREADY_EXISTS":
      print("Document already exists in the database.  Skipping.")

# similarity search between query and image embedding
# embedding(query)



import json

# Embed the similar item
img = Image.load_from_file('coffee_maker_part.png')

embeddings = embed_model.get_embeddings(image=img, contextual_text="A espresso machine part")

embeddings.image_embedding

documents =collection.vector_find(
    embeddings.image_embedding,
    limit=3
)

documents[0]

documents[1]

documents[2]

related_products_csv = "name, image, price, url\n"

for doc in documents:
  related_products_csv += f"{doc['name']}, {doc['image']}, {doc['price']}, {doc['url']},\n"

print(related_products_csv)

image_message = {
    "type": "image_url",
    "image_url": {"url": "/content/coffee_maker_part.png"},
}

text_message = {
    "type": "text",
    "text": f"What we have in this image? Share the URL and price to purchase a replacement.Here are related products {related_products_csv} ",
}

message = HumanMessage(content=[text_message, image_message])

chat = ChatVertexAI(model_name="gemini-1.0-pro-vision")

output=chat([message])

output=chat([message])

print(output)